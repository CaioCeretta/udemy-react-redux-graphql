{"version":3,"file":"static/js/562.b1bd8a94.chunk.js","mappings":"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","sources":["components/Button/index.tsx","components/Input/index.tsx","components/SignIn/index.tsx","components/SignUp/index.tsx","pages/authentication/index.tsx"],"sourcesContent":["import React, { ButtonHTMLAttributes, ReactNode } from 'react'\n\nimport './styles.scss'\n\nexport enum BUTTON_TYPE_CLASSES {\n  base = 'base',\n  google = 'google-sign-in',\n  inverted = 'inverted'\n}\n\n\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  paymentLoading?: boolean;\n  isPayment?: boolean;\n  children: ReactNode;\n  type: \"submit\" | \"button\";\n  buttonType?: keyof typeof BUTTON_TYPE_CLASSES\n}\n\n/*\nOR\n\ninterface ButtonProps {\n  paymentLoading?: boolean;\n  isPayment: boolean;\n  children: ReactNode;\n  buttonType: keyof typeof BUTTON_TYPE_CLASSES\n} & ButtonHTMLAttributes<HTMLButtonElement>\n\n\n*/\n\nexport default function Button({ paymentLoading, type, isPayment = false, children, buttonType = 'base', ...otherProps }: ButtonProps) {\n\n  return (\n    <button\n    type={type}\n    disabled={paymentLoading}\n    className={`${isPayment ? 'payment-button' : '' } button-container\n    ${buttonType === 'base' ? '' : buttonType}`} {...otherProps}>\n      {children}\n    </button>\n  )\n}\n","\n\nimport { ChangeEvent, InputHTMLAttributes } from \"react\";\n\nimport './styles.scss';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  inputObject: {\n    type: string;\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    name: string;\n    value: string,\n    required: boolean,\n  }\n\n}\n\nexport default function Input({ label, inputObject, ...otherProps }: InputProps) {\n  // If inputObject is provided, use its properties; otherwise, use otherProps\n  const inputProps = inputObject || otherProps;\n\n  return (\n    <div className=\"group\">\n      <input className=\"form-input\" {...inputProps} />\n\n      {label && (\n        <label\n          className={`${inputProps.value ? \"shrink\" : \"\"\n            } form-input-label`}\n          htmlFor=\"\"\n        >\n          {label}\n        </label>\n      )}\n    </div>\n  );\n}","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport { useDispatch } from 'react-redux';\n\n\nimport Button from \"../Button\";\nimport Input from \"../Input\";\n\nimport { emailSignInStart, googleSignInStart } from \"../../store/user/user.action\";\nimport \"./styles.scss\";\n\n\nconst defaultFormFields = {\n  email: \"\",\n  password: \"\",\n};\n\nexport const SignIn = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields;\n\n  const dispatch = useDispatch();\n\n\n  const signInWithGoogle = () => {\n    dispatch(googleSignInStart());\n  };\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n\n    try {\n      dispatch(emailSignInStart(email, password));\n      resetFormFields();\n    } catch (e: any) {\n      if (e.code === 'auth/wrong-password' || e.code === 'auth/user-not-found') {\n        alert('Email or password incorrect')\n      }\n      console.log(e);\n    }\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <div className=\"sign-in-container\">\n      <h2>Already have an account? </h2>\n      <span>Sign in with your e-mail and password</span>\n      <form onSubmit={handleSubmit}>\n        <Input\n          label={\"email\"}\n          inputObject={{\n          type:\"email\",\n          required: true,\n          onChange:handleChange,\n          name:\"email\",\n          value:email,\n          }}\n        />\n        <Input\n          label={\"password\"}\n          inputObject={{\n          type: \"password\",\n          required: true,\n          onChange: handleChange,\n          name: \"password\",\n          value: password,\n          }}\n        />\n\n        <div className=\"buttons-container\">\n          <Button type=\"button\" buttonType={'inverted'}> Confirm </Button>\n          <Button type=\"button\"> Reset </Button>\n        </div>\n\n      </form>\n\n      <span style={{ margin: \"1rem 0\" }}>\n        Or sign in with your google account\n      </span>\n      <Button type=\"button\" buttonType=\"google\" onClick={signInWithGoogle}>\n        Sign In with Google Popup\n      </Button>\n      {/* <button onClick={signInWithGoogleRedirect}>\n        Sign In with Google Redirect\n      </button> */}\n    </div>\n  );\n};\n","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport Input from \"../Input\";\n\nimport { useDispatch } from \"react-redux\";\nimport { signUpStart } from \"../../store/user/user.action\";\nimport Button from \"../Button\";\nimport \"./styles.scss\";\n\ninterface FormFields {\n  displayName: string;\n  email: string;\n  password: string;\n  confirmPassword: string\n}\n\nexport const SignUp = () => {\n  const defaultFormFields: FormFields = {\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const dispatch = useDispatch();\n\n  const resetFormFields = () => {\n    setFormData(defaultFormFields);\n  };\n\n  const [formData, setFormData] = useState<FormFields>(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formData;\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  async function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"Passwords aren not equal\");\n      return;\n    }\n\n    try {\n      dispatch(signUpStart(email, password, displayName))\n      resetFormFields()\n\n    } catch(error: any) {\n      if(error.code === 'auth/email-already-in-use') {\n        alert('Cannot create user, email already in use')\n      } else {\n        console.log('User creation encountered an error', error)\n      }\n    }\n  }\n\n  return (\n    <div className=\"sign-up-container\">\n      <h2>Don't have an account?</h2>\n      <span>Sign up with your e-mail and password</span>\n      <form onSubmit={handleSubmit}>\n        <Input\n          label=\"Display Name\"\n          inputObject={{\n            type: \"text\",\n            onChange: handleChange,\n            name: \"displayName\",\n            value: displayName,\n            required: true,\n          }}\n        />\n\n        <Input\n        label=\"Email\"\n        inputObject={{\n          type: 'email',\n          onChange: handleChange,\n          name: \"email\",\n          value: email,\n          required: true\n        }}\n        />\n\n        <Input\n          label=\"Password\"\n          inputObject={{\n          type:\"password\",\n          onChange:handleChange,\n          name:\"password\",\n          value:password,\n          required: true,\n          }}\n        />\n\n        <Input\n          label=\"Confirm Password\"\n          inputObject={{\n          type:\"password\",\n          onChange:handleChange,\n          name:\"confirmPassword\",\n          value:confirmPassword,\n          required: true\n          }}\n        />\n\n        <Button type=\"submit\">Sign Up</Button>\n      </form>\n    </div>\n  );\n};\n","import { SignIn } from \"../../components/SignIn\";\nimport { SignUp } from \"../../components/SignUp\";\n\nimport './styles.scss'\n\nexport const Authentication = () => {\n  return (\n    <div className=\"authentication-container\">\n      <SignIn />\n      <SignUp />\n    </div>\n  );\n};\n"],"names":["BUTTON_TYPE_CLASSES","Button","_ref","paymentLoading","type","isPayment","children","buttonType","otherProps","_jsx","disabled","className","concat","Input","label","inputObject","inputProps","_jsxs","value","htmlFor","defaultFormFields","email","password","SignIn","formFields","setFormFields","useState","dispatch","useDispatch","handleChange","e","name","target","onSubmit","async","preventDefault","emailSignInStart","code","alert","console","log","required","onChange","style","margin","onClick","signInWithGoogle","googleSignInStart","SignUp","displayName","confirmPassword","formData","setFormData","signUpStart","error","Authentication"],"sourceRoot":""}